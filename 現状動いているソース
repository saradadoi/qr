using OpenCvSharp;
using OpenCvSharp.Extensions; // これ追加しておく
using System.Threading;
using System.Windows;
using ZXing;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using WpfApplication2;
using Microsoft.Win32;
using System.Threading.Tasks;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using System.IO;
using System.Net;


namespace CameraCapture
{
    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : System.Windows.Window
    {
       public bool IsExitCapture { get; set; }
       
       //QRコードを保存する場所とファイル名を指定。
       string CAPTURE_PATH = System.AppDomain.CurrentDomain.BaseDirectory + "result.bmp";

        /// <summary>
        /// カメラ画像を取得して次々に表示を切り替える
        /// </summary>
        public virtual void Capture(object state)
        {
            //0番目のデバイスを指定
            var camera = new VideoCapture(0)
           {
                // キャプチャする画像のサイズフレームレートの指定
                FrameWidth = 1200, 
                FrameHeight =2400,
                Fps = 60
            };

            // 撮影した画像を受ける変数
            using (var img = new Mat()) 
            using (camera)
            {
                while (true)
                {
                    if (this.IsExitCapture)
                    {
                        this.Dispatcher.Invoke(() => this._Image.Source = null);
                        break;
                    }

                    // Webカメラの読み取り（バッファに入までブロックされる
                    camera.Read(img); 

                    //Webカメラが取れなかった場合
                    if (img.Empty())
                    {
                        break;
                    }

                    //
                    this.Dispatcher.Invoke(() =>
                    {

                        // WPFにWebカメラで読み取った画像を表示
                        this._Image.Source = img.ToWriteableBitmap(); 

                       //Webカメラで読み取った画像を指定したパスに保存
                       img.SaveImage(CAPTURE_PATH);

                        MemoryStream data = new MemoryStream(File.ReadAllBytes(CAPTURE_PATH));

                        // WPFではBitmapImageかBitmapSourceを渡す
                        WriteableBitmap source = new WriteableBitmap(BitmapFrame.Create(data));
                        //読み取った画像を使用できるように他で使用できるようにclose;
                        data.Close();


                       // バーコード読み取り
                       // WPFではZXing.Presentation名前空間のBarcodeReaderを使う
                        ZXing.Presentation.BarcodeReader reader = new ZXing.Presentation.BarcodeReader();

                       //QRコード解析
                       ZXing.Result result = reader.Decode(source);

                       // QRコード正常に読み込んだ場合、resultはnullではなくなる。
                       if (result != null)
                       {
                           // result.TextがQRコードの内容
                           MessageBox.Show(result.Text);
                       }   
                    });
                }
            }
        }

        // ---- EventHandlers ----

        /// <summary>
        /// Windowがロードされた時
        /// ※消すとエラーになる。WPFのお決まり？
        /// </summary>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            ThreadPool.QueueUserWorkItem(this.Capture);
        }

    }
}
